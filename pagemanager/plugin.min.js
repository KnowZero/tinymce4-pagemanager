/**
 *
 * Copyright, KnowZero
 * Released under Apache 2.0 License.
 * Version 0.02-Alpha
 *
 * Contributing: https://github.com/KnowZero/tinymce4-pagemanager
 */

tinymce.PluginManager.add('pagemanager', function(editor, url) {

 var pmdocevents={};
 var pmsidelist=[];

 var pm_sectionOrderHash = {};
 var pm_sectionOrder = (editor.getParam('pm_section_order')||'').split('');
 var pm_sectionDef = editor.getParam('pm_section_def');
 var pm_foldMode = (editor.getParam('pm_fold_mode')||'none');


 //console.log( editor.getParam('pm_section_order') );
 $.each( pm_sectionOrder, function (i,val) {
	pm_sectionOrderHash[val]=i;
 });

 var pm_pages={};

 var pm_lastfind=0;
 
 var pm_findFunc;

 // Load Stylesheet into UI
 var css_link = $("<link>", {
    rel: "stylesheet",
    type: "text/css",
    href: url + '/css/default.css'
 });
 css_link.appendTo('head');
 

var tbody;
 
function _onscreen(obj) {
    
    var win = $( editor.getWin() );
    
    var viewport = {
        top : win.scrollTop(),
 //       left : win.scrollLeft()
    };
   // viewport.right = viewport.left + win.width();
    viewport.bottom = viewport.top + win.height();
    
    var bounds = obj.offset();
   // bounds.right = bounds.left + obj.outerWidth();
    bounds.bottom = bounds.top + obj.outerHeight();
    
//console.log( "ok="+$(obj).data('header-p')+"="+viewport.bottom+'<'+bounds.top );
//console.log( "ok="+$(obj).data('header-p')+"="+viewport.top+'>'+bounds.bottom );

var offset=200+win.height();

if (pm_foldMode == 'page') {
offset=0;
}

if ( (!(viewport.bottom < bounds.top || viewport.top > bounds.bottom)) ) {
return 1;
} else if ( (!(viewport.bottom+offset < bounds.top || viewport.top-offset > bounds.bottom)) ) {
return 2;
}


return 0;

//return (!( viewport.bottom < bounds.top || viewport.top > bounds.bottom ));

    //return (!(viewport.right < bounds.left || viewport.left > bounds.right || viewport.bottom < bounds.top || viewport.top > bounds.bottom));
   
}

function _getTextNodesIn(node, includeWhitespaces) {
    var textNodes = [], nonWhitespaceMatch = /\S/;

    function _getTextNodes(node) {
        if (node.nodeType == 3) {
            if (includeWhitespaces || nonWhitespaceMatch.test(node.nodeValue)) {
                textNodes.push(node);
            }
        } else {

            for (var i = 0, len = node.childNodes.length; i < len; ++i) {
                _getTextNodes(node.childNodes[i]);
            }
        }
    }

    _getTextNodes(node);
    return textNodes;
}

//var iframe = $('#'+tinymce.activeEditor.id+'_ifr').contents();

 
function _scrollTo(mynode,offset) {


if (pm_foldMode == 'display') {
$(mynode).closest('section').css('display','block');
} else if (pm_foldMode == 'page') {
$(tbody).find('article').css('display','none');
if (  $(mynode).prop('tagName') == 'ARTICLE'  )   {
$(mynode).css('display','block');
}
$(mynode).parents('article').css('display','block');

}

$(mynode).get(0).scrollIntoView();
var telem=$(mynode).closest('body').get(0);
if(0 < telem.scrollTop) telem.scrollTop += offset;




}


function _pageVisibilityAll(is_scroll) {

//console.log('scrolled');
if (pm_foldMode == 'none') {

} else if (pm_foldMode == 'visibility') {

     $(tbody).find('section').each(function (i,obj) {
var onscreen = _onscreen( $(obj) );
if ( onscreen >= 1 ) {
$(obj).parent().css('visibility','visible');



//console.log( $(obj).parent() );
} else if ( $(obj).parent().css('visibility') == 'visible' ) {
$(obj).parent().css('visibility','hidden');
}

if ( onscreen == 1) {
$('.pm-side-select').removeClass('pm-side-select');
var tselect=$( '#pm-sidebar-list div[data-list-id="'+$(obj).parent().data('list-id')+'"]' );
if ( (tselect.attr('title')||'') == '' ) {
tselect.prev().toggleClass('pm-side-select');
} else {
tselect.toggleClass('pm-side-select');
}

}


     });

} else if (pm_foldMode == 'display') {
     $(tbody).find('section').each(function (i,obj) {
var onscreen = _onscreen( $(obj).parent() );
if ( onscreen == true ) {
$(obj).css('display','block');
//console.log( $(obj).parent() );
} else if ( $(obj).css('display') == 'block' ) {
$(obj).css('display','none');
}

if ( onscreen == 1) {
$('.pm-side-select').removeClass('pm-side-select');
var tselect=$( '#pm-sidebar-list div[data-list-id="'+$(obj).parent().data('list-id')+'"]' );
if ( (tselect.attr('title')||'') == '' ) {
tselect.prev().toggleClass('pm-side-select');
} else {
tselect.toggleClass('pm-side-select');
}

}


     });

} else if (pm_foldMode == 'page' && (is_scroll||false) == false) {
var tobj;
$(tbody).find('article').each(function (i,obj) {

if ( i == 0 ) {
tobj=obj;
//console.log( $(obj).parent() );
} else if ( $(obj).css('display') == 'block' ) {
$(obj).css('display','none');
}


     });



$(tobj).find('section:first').parents('article').css('display','block');


}



}

 
    	editor.addSidebar('mysidebar1', {
		  tooltip: 'Page List',
		  icon: 'bullist',
		  
		  onrender: function (api) {
			  console.log('Render panel', api.element());
			  $(api.element()).html(  $('<div id="pm-sidebar-list"></div>') );
			  pm_genSidebar();

		  },
		  onshow: function (api) {
			  console.log('Show panel', api.element());

		  },
		  onhide: function (api) {
			  console.log('Hide panel', api.element());
		  }
   		});


 

    	editor.addSidebar('mysidebar2', {
		  tooltip: 'Find',
		  icon: 'browse',
		  
		  onrender: function (api) {

var pm_find_label = $('<label />',{
id: 'mce-pm-find-label',
text: 'Find:',
style: 'font-weight: bold;'
});

var pm_find_input = $('<input />',{
id: 'mce-pm-find-input',
style: 'display: block; width: 100%; background-color: #FFFFFF; margin-bottom: 1em'
});

$(pm_find_label).append(pm_find_input);





var pm_find_button = $('<button />',{
id: 'mce-pm-find-button',
text: 'Find',
style: 'margin: 1em; border: 1px'
});

var pm_find_all_button = $('<button />',{
id: 'mce-pm-find-all-button',
text: 'Find All',
style: 'margin: 1em;  border: 1px'
});

var pm_find_list = $('<select />',{
id: 'mce-pm-find-list',
size: 2,
style: 'display: block; width: 100%; height: 100%; background-color: #FFFFFF; margin-bottom: 1em'
});


pm_findFunc=function () {


var ttext= (  $('#mce-pm-match-input').prop('checked') == true ) ? $(pm_find_input).val():$(pm_find_input).val().toLowerCase();
var search = $(tbody).find( "p, td, div" ).each( function (i)
{




if ( $(this).index() > pm_lastfind ) {

var tstext = ( $('#mce-pm-match-input').prop('checked') == true ) ?  $( this ).text():$( this ).text().toLowerCase();
var tloc = tstext.indexOf( ttext );


if ( tloc >= 0 ) {
mynode=this;
pm_lastfind=$(mynode).index();

_scrollTo(mynode,-50);


var tstart=tloc;
var tend=tloc+ttext.length;

var startNode;
var endNode;

var textNodes=_getTextNodesIn(  $(mynode).get(0), true);

var ttotal=0;

$.each(textNodes,function () {
var tlen=$(this).text().length;


if ( ttotal+tlen >= tstart && startNode == undefined ) {
startNode=this;
tstart-=ttotal;
}
if ( ttotal+tlen >= tend && endNode == undefined ) {
endNode=this;
tend-=ttotal;
}

ttotal+=tlen;


});


var range = editor.selection.getRng();
range.setStart( startNode , tstart);
range.setEnd(endNode, tend );
editor.selection.setRng(range); 


 return false;
}

}

});



};


var pm_find_array=[];
pm_findAllFunc=function () {
pm_find_array=[];
$(pm_find_list).empty();

var ttext= (  $('#mce-pm-match-input').prop('checked') == true ) ? $(pm_find_input).val():$(pm_find_input).val().toLowerCase();
var search = $(tbody).find( "p, td, div" ).each( function (i)
{

var tstext = ( $('#mce-pm-match-input').prop('checked') == true ) ?  $( this ).text():$( this ).text().toLowerCase();
var tloc = tstext.indexOf( ttext );


if ( tloc >= 0 ) {

if (   $(this).prop('tagName') == 'TD' && $(this).children(0).prop('tagName') == 'P' ) {

} else {

$(pm_find_list).append( $('<option />',{ value: pm_find_array.length, text: $( this ).text(), title: $( this ).text(), 'data-pos-start': tloc, 'data-pos-end': tloc+ttext.length }) );

pm_find_array.push( $(this) );
}


}



});




};

$(pm_find_button).on('click',pm_findFunc);
$(pm_find_all_button).on('click',pm_findAllFunc);


$(pm_find_list).on('dblclick',function () {


var tstart = $(this).find(':selected').data('pos-start');
var tend = $(this).find(':selected').data('pos-end');

var startNode;
var endNode;


mynode=pm_find_array[ $(this).val() ];
pm_lastfind=$(mynode).index();


_scrollTo(mynode,-50);


var textNodes=_getTextNodesIn(  $(mynode).get(0), true);

var ttotal=0;

$.each(textNodes,function () {
var tlen=$(this).text().length;


if ( ttotal+tlen >= tstart && startNode == undefined ) {
startNode=this;
tstart-=ttotal;
}
if ( ttotal+tlen >= tend && endNode == undefined ) {
endNode=this;
tend-=ttotal;
}

ttotal+=tlen;


});


var range = editor.selection.getRng();
range.setStart( startNode , tstart);
range.setEnd(endNode, tend );
editor.selection.setRng(range); 



});






//console.log(search);

//$(mynode).css('background-color','#FF0000');




var pm_replace_label = $('<label />',{
id: 'mce-pm-replace-label',
text: 'Replace:',
style: 'font-weight: bold'
});

var pm_replace_input = $('<input />',{
id: 'mce-pm-replace-input',
style: 'display: block; width: 100%; background-color: #FFFFFF; margin-bottom: 1em'
});

$(pm_replace_label).append(pm_replace_input);

var pm_replace_button = $('<button />',{
id: 'mce-pm-replace-button',
text: 'Replace',
style: 'margin: 1em'
});





var pm_match_label = $('<label />',{
id: 'mce-pm-match-label',
style: 'display: block; padding-left: 15px; text-indent: -15px; cursor: pointer'
});

var pm_match_input = $('<input />',{
type: 'checkbox',
id: 'mce-pm-match-input',
value: 1,
style: 'background-color: #FFFFFF; margin-bottom: 1em'
});

$(pm_match_label).append(pm_match_input);
$(pm_match_label).append(' Match Case');

var toutput = $('<div />',{ style:'padding: 1em; height: 80%' });

toutput.append( pm_find_label );
//>>toutput.append( pm_replace_label );

toutput.append( pm_match_label );

toutput.append( pm_find_button );
//>>toutput.append( pm_replace_button );


toutput.append( pm_find_all_button );

toutput.append( pm_find_list );

	  $(api.element()).html( toutput  );

		  },
		  onshow: function (api) {


		  },
		  onhide: function (api) {
		
		  }
   		});
 



 editor.on('DblClick', function(e) {
 var mynode = $(e.target);
 var mypnode = mynode.parent();
 
 if ( mypnode.prop('tagName') == 'HEADER' ) {
 
             editor.windowManager.open({
                title: 'Edit ' + mynode.data('name') + ' Name',
			 minWidth: 500,
                id: 'pm-header-dialog',
                body: [
                    { type: 'textbox', name: 'name', id: 'pm-header-value', value: mynode.text() },
			],
			onSubmit:function (e) {
var ttype=$(mynode).data('header-type');
var pnode=$(mynode).closest('article[data-page-type="'+ttype+'"]');

pnode.data('header-'+ttype, $('#pm-header-value').val() );

pnode.find('header *[data-header-type="'+ttype+'"]').text( $('#pm-header-value').val() );
   

pm_genSidebar();
			
			}
			});
 
 
 }

 
 });
 
 
 editor.on('change:options',function() {
 console.log('tttttt');
 
 });


 editor.on('remove', function(e) { 

 $.each(pmdocevents,function(key,val){
    if ( val[1] == '' ) {
        $(document).off(val[0], val[2]);
    } else {
        $(document).off(val[0], val[1], val[2]);
    }
 });

 });

 editor.on('init', function(e) {


editor.shortcuts.remove('Meta+F');
editor.shortcuts.remove('Meta+G');
editor.shortcuts.add('Meta+F','', function() {

$('.mce-sidebar-toolbar *[aria-label="Find"]').click()

$('#mce-pm-find-input').focus();

});

    editor.dom.loadCSS(url + '/css/default.css');

     tbody=$(editor.getBody());

    tbody.addClass('mceNonEditable'); 
    tbody.attr('contenteditable',false);
    
    var mynode = tbody[0].childNodes[0];
    
    
    if ( mynode.nodeName != 'ARTICLE' ) {
		mynode.parentNode.removeChild( mynode );
    }

$(editor.getWin()).on('scroll',function(){

_pageVisibilityAll(true);
});
    

pmdocevents.newpageselect_changeHandler=['mousedown','.mce-pm-header-selectbox',function (e) {    

 var mynode = this;
 var tlast=tinymce.activeEditor.getBody();
 var tupdate;
 $('.mce-pm-header-valuelist').each(function(i,obj) {
var oVal=$(obj).val();
if ( oVal == undefined ) {
return false;
}

  var tsplit = oVal.split('\t\|\t');
 
  tlast=$(tlast).children().eq( tsplit[0] );
 
 console.log( 'TAG='+$(this).prop('tagName')+'='+i );
 
  if (  $(obj).is( mynode )  ) {
  console.log('MATCH!');
  //console.log( $(tlast).children()  );
  tupdate =  $(tlast).children('article').map( function(i2,obj2) { console.log('CHIL='+i2+'='+ 'header-'+pm_sectionOrder[(i+1)]+'='+$(obj2).data( 'header-'+pm_sectionOrder[(i+1)])   ); console.log(obj2);  var tval=(''+i2).padStart(10,'0')+"\t|\t"+ $(obj2).data( 'header-'+pm_sectionOrder[(i+1)] );  return $('<option />',{  text:tval, value:tval  })   } )  ;
  
  //console.log(tupdate);
  
  } else if ( $(this).prop('tagName') == 'SELECT' && tupdate != undefined ) {
 
 console.log('EMPTY!');
 console.log( tupdate );
   $(obj).empty();
   
   $(tupdate).each(function(i2,obj2) {
   $(obj).append( obj2 );
   });
   
    tupdate=$();
  
  } 
 
 });


 

 
 
console.log( 'ERR='+$(this).val()  );
 
 
 }];
 

 $.each(pmdocevents,function(key,val){
    if ( val[1] == '' ) {
        $(document).on(val[0], val[2]);
    } else {
        $(document).on(val[0], val[1], val[2]);
    }
 });
    
    
   // tinyMCE.activeEditor.setContent('<article class="mceEditable"><section><p></p></section></article>');
 });

 editor.addCommand('mcePMImportPage', function (ui,args) {
  editor.undoManager.add();
  var tvalues=[];
  $.each( pm_sectionOrder, function (i,val) {
    tvalues.push( (args.headers[val]||'')  );
  });

			 pm_addPage( tvalues ,  args  );
			

 });


 editor.addCommand('mcePMAddPage', function (ui,args) {
 editor.undoManager.add();
 //console.log ( 'NODE='+tinymce.activeEditor.selection.getNode().nodeName );
 
 var selNode=tinymce.activeEditor.selection.getNode();

 // console.log ( $(selNode).prop('tagName') );

if ( $(selNode).prop('tagName') == 'BODY' ) {
  var selNode2=$(tinymce.activeEditor.getBody()).find('section').get(0);
   if ( $(selNode2).prop('tagName') == 'SECTION'  ) {
selNode=selNode2;
   }

}

 var mymap = pm_map_to_root( selNode );
 
 var mybody = tinymce.activeEditor.getBody();
 
 
 
 tbody=[];
 // console.log(  'ppp' );
  
  $.each( pm_sectionOrder, function (i,val) {
  
  if ( pm_sectionOrderHash[val] >= pm_sectionOrderHash[args['type']] ) {
  console.log(  val + '=' + args['type'] );
	
		 tbody.push(
                    { type: 'textbox', label: pm_sectionDef[val]['data-name'] , name: 'name', classes:'pm-header-valuelist', value: '' },
		 );
	
	
	} else {
	
	var toptions=[];
	
	//console.log( 'ZZZZZ' );
	$.each(mymap[i],function (i2,obj) {
	
		//if ( $(obj).data('section-depth') <= i   ) {
	//console.log( $(obj).data('header-'+(val)+'') );
		toptions.push( (''+i2).padStart(10,'0')+"\t|\t"+$(obj).data('header-'+(val)+'') );
		//}
     });
			 
			 
			 
 tbody.push(
                    { type: 'selectbox', name: 'name', classes:'pm-header-valuelist pm-header-selectbox', options:toptions },
		 );
		 

		 
		 
		 
	
	}
  


 });
 
 

// console.log('here');
              editor.windowManager.open({
                title: 'Add Name',
			 minWidth: 500,
                id: 'pm-page-dialog',
                body: tbody,
			 onSelect: function () { console.log('ji') },
			onSubmit:function (e) {
			console.log( $($('.mce-pm-header-valuelist')[0]).val() );
			 pm_addPage( $('.mce-pm-header-valuelist').map( function (i,mynode) { console.log(mynode);  return $(mynode).val()  } ) ,  args  );
		//	console.log( $('.mce-pm-header-valuelist').map( function (i,mynode) { console.log(mynode);  return $(mynode).val()  } ) );
			// mynode.text( $('#pm-header-value').val() );
			
			
			}
			});
		//	 console.log('here2');
 
 });

 editor.addCommand('mcePMAddHeader', function (ui,args) {
 console.log(args);
	var theader=$('<header />',{ 'contenteditable':false, 'class':'mceNonEditable' });
	
	$.each( args, function (i,val) {
	
		$(theader).append( $('<h'+(i+1)+' />',val) );
	
	});

	
   // $(tinymce.activeEditor.getBody()).find('article').prepend( theader ) ;
 });
 
 
 
  function pm_genSidebar() {
	var tbody=tinymce.activeEditor.getBody();
 // console.log('sidebar');

pmsidelist=[];
  
$('#pm-sidebar-list').empty();
     $(tbody).find('article').each(function (i2,obj) {
pmsidelist[i2]=obj;
$(obj).data('list-id',i2);
	$('#pm-sidebar-list').append( 
	$('<div />',{
	html: $(obj).data('header-'+$(obj).data('page-type')),
    title: $(obj).data('header-'+$(obj).data('page-type')),
    'data-list-id': i2,
	style: 'cursor: pointer; margin: 10px 10px 10px '+( 5 * (parseInt($(obj).data('page-depth'))+1)  )+'px',
	'class': pm_sectionDef[ $(obj).data('page-type') ]['class']
	
	})
	
	);

	
	});

$('#pm-sidebar-list div').on('click',function () {
$('.pm-side-select').removeClass('pm-side-select');
$(this).toggleClass('pm-side-select');

var mynode = pmsidelist[$(this).data('list-id')];

_scrollTo( $(mynode).find('section'),0);



});

  
  
  }
 
 
 
 function pm_addPage(values,args) {
 console.log('ADDPAGE='+args['type']);
//console.log( values );


console.log( values );
//console.log('PREADD');
	var pos = args['pos'];
	var tarchive=[];
	var treg = /^[0-9]+\t\|\t/;
	
 
	//var tpage=$('<article />',{ 'contenteditable':true, 'class':'mceEditable', data });
		var tlast=tinymce.activeEditor.getBody();
		var tfirst;
	$.each( pm_sectionOrder, function (i,val) {
	
	
	if ( treg.test( values[ i ] )  ) {
		tsplit = values[ i ].split('\t\|\t');
//	console.log( "SPLIT="+tsplit[0] );
		tarchive[i] =  $(tlast).children().eq( tsplit[0] );
		tlast = tarchive[i];
	} else {
	
		tarchive[i] = $('<article />',{ 'contenteditable':true, 'class':'mceEditable pm-pagestyle-'+pm_sectionOrder[i], 'data-page-depth': i, 'data-page-type':pm_sectionOrder[i], ['data-header-'+val] : values[ i ].replace(treg)  });
	
		if ( tfirst == undefined ) {
		tfirst = tarchive[i];
		}
		
		if ( i != 0 ) {
		$(tarchive[(i-1)]).append(tarchive[i]);

		}
		
	}
	});
	
//	console.log( tarchive );
	
	tpage=tarchive[ (tarchive.length-1) ];
	
	
	
	
	
	var theader=$('<header />',{ 'contenteditable':false, 'class':'mceNonEditable' });
	
	var newParent=0;
	var header
	$.each( pm_sectionOrder, function (i,val) {
	
		if ( args['type'] == val ) {
		
			newParent=1;
		} else if ( newParent == 1 ) {
		
		
		} else {
		
		}
		

	
	values[ i ]=values[ i ].replace(treg, '');
	
	//console.log( 'CREATE=' + 'header-'+val );

		$(theader).attr( 'data-header-'+val, values[ i ] );
		if ( args['type'] == val ) {
		$(theader).attr( 'data-section-depth', pm_sectionOrderHash[val] );
		}
	
		$(theader).append( $('<h'+(i+1)+' />',  Object.assign( pm_sectionDef[val], { text:values[ i ], 'data-header-type': val } )  ) );
	
	});
	
	var tsection=$('<section />',{ 'contenteditable':true, 'class':'mceEditable' });
	
	tsection.append( ( args['content'] || $('<p />', { html: '&nbsp;' }) ) );
	
	tpage.append( theader );
	tpage.append( tsection );
	
	
	
	//console.log( 'APPENDTO='+$(tlast)[0].outerHTML );
	
	 $(tlast).append( tfirst ) ;
 _pageVisibilityAll();
 pm_genSidebar();
 }
 
 
 
 
  function pm_map_to_root (mynode) {
  
	var ttree=[];
	    var pfind = 0;
	    
	    if ( mynode.nodeName == 'HTML' ) {
	      mynode = $(mynode).find('BODY').get(0);
		 
	    }
	    
	    
    while ( pfind != 1 ) {
	if ( mynode.nodeName == 'BODY' ) {
		pfind=1;
	} 
	
	if ( (mynode.nodeName == 'ARTICLE' || mynode.nodeName == 'BODY') && mynode.childNodes[0] != undefined && mynode.childNodes[0].nodeName == 'ARTICLE' ) {
	ttree.push( $.grep( mynode.childNodes, function (cnode) {  if ( cnode.nodeName == 'ARTICLE' ) {  return true; } else { return false; }    }) );
//	console.log(ttree);
	}
	
	mynode = mynode.parentNode;
		
    }
    
    
    return ttree.reverse();
  
  }
 
 

});
